#!/usr/bin/env node

var program = require('commander');
var inquirer = require('inquirer');
var request = require('request');

API_URL = 'http://en.wikipedia.org/w/api.php';
timeoutErrorMessages = ['HTTP request timed out.', 'Pool queue is full'];

program
    .version('0.0.1')
    .usage('[options]')
    .description('Wikipedia articles on command line')
    .option('--log-filename <file>', 'Path to log queries')
    .parse(process.argv);

program.logFilename = program.logFilename || 'wikipedia_cli_node.log';

function search(query, callback) {
    var search_params = {
        'list': 'search',
        'srprop': '',
        'srlimit': 10,
        'limit': 10,
        'srsearch': query
    };

    _wiki_request(search_params, function (error, response, body) {
        if (error) {
            return callback(error);
        }

        var raw_results = JSON.parse(body);
        if (raw_results['error']) {
            if (timeoutErrorMessages.contains(raw_results['error']['info'])) {
                return callback(error)
            } else {
                return callback(new Error(raw_results['error']['info']))
            }
        }

        if (response.statusCode != 200) {
            return callback(new Error('Bad Request'));
        }

        var queryResults = raw_results['query']['search'];
        if (!queryResults.length) {
            console.log('No results were found');
            return;
        }

        var titles = [];
        for (var i = 0; i < queryResults.length; i++) {
            titles.push(queryResults[i]['title']);
        }

        inquirer.prompt([{
            type: 'list',
            name: 'search_term',
            choices: titles,
            message: "Choose from the following results"
        }]).then(function (answers) {
            callback(undefined, answers['search_term']);
        });
    });
}

inquirer.prompt([{
    type: 'input',
    name: 'query',
    message: 'Search'
}]).then(function (answers) {
    search(answers.query, function (err, title) {
        if (err) {
            return err;
        }
        
        console.log(title);
    });
});

function _wiki_request(params, callback) {
    params['format'] = 'json';
    if (!params.hasOwnProperty('action')) {
        params['action'] = 'query';
    }

    request({url: API_URL, qs: params}, callback);
}
